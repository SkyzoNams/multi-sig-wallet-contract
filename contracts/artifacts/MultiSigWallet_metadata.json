{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_signers",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "_requiredSignatures",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_recoveryAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "Cancellation",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "Execution",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "destination",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "NewTransaction",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "signer",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bool",
						"name": "isSigner",
						"type": "bool"
					}
				],
				"name": "SignerUpdate",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"name": "addSigner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "approvals",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "approveTransaction",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "cancelTransaction",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "destination",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "createTransaction",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "destination",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "createUniqueId",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "executeTransaction",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "isSigner",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "recoverWallet",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "recoveryAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"name": "removeSigner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "requiredSignatures",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "signers",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "transactionList",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "transactions",
				"outputs": [
					{
						"internalType": "address",
						"name": "destination",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "bool",
						"name": "executed",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addSigner(address)": {
					"details": "Only the contract owner can call this function.",
					"params": {
						"signer": "The address of the signer to be added."
					}
				},
				"approveTransaction(bytes32)": {
					"details": "Only signers can call this function.",
					"params": {
						"id": "The id of the transaction to approve."
					}
				},
				"cancelTransaction(bytes32)": {
					"details": "The transaction must exist and must not have already been executed. The function removes the transaction from the transaction list and deletes its details. It also deletes the approvals for the transaction. An event is emitted to notify that the transaction has been cancelled.",
					"params": {
						"id": "The ID of the transaction to be cancelled."
					}
				},
				"constructor": {
					"params": {
						"_recoveryAddress": "The address that can be used to recover the wallet in case of a lost or compromised account.",
						"_requiredSignatures": "The minimum number of signatures required to execute a transaction.",
						"_signers": "An array of addresses representing the initial signers of the wallet."
					}
				},
				"createTransaction(address,uint256,bytes)": {
					"details": "The function generates a unique ID for the transaction, stores the transaction details in the transactions mapping, adds the transaction ID to the transaction list, and emits an event to notify that a new transaction has been created.",
					"params": {
						"data": "Additional data to include with the transaction.",
						"destination": "The address of the destination for the transaction.",
						"value": "The amount of ether to send with the transaction."
					},
					"returns": {
						"_0": "The unique ID of the created transaction."
					}
				},
				"createUniqueId(address,uint256,bytes)": {
					"details": "This function uses the keccak256 hash function to generate a unique ID for a transaction. The ID is based on the destination address, the amount of Ether to send (in wei), the data to include in the transaction, and the current block timestamp.",
					"params": {
						"data": "The data to include in the transaction.",
						"destination": "The address of the destination contract.",
						"value": "The amount of Ether to send (in wei)."
					},
					"returns": {
						"_0": "A unique transaction ID as a bytes32 value."
					}
				},
				"executeTransaction(bytes32)": {
					"details": "The transaction must exist in the contract, and the function can only be called by a signer.",
					"params": {
						"id": "The ID of the transaction to be approved."
					}
				},
				"recoverWallet(address)": {
					"details": "Only the recovery address can call this function.",
					"params": {
						"newOwner": "The address that will become the new owner of the wallet."
					}
				},
				"removeSigner(address)": {
					"details": "Only the owner of the contract can call this function.",
					"params": {
						"signer": "The address of the signer to be removed."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addSigner(address)": {
					"notice": "This function adds a new signer to the list of signers"
				},
				"approveTransaction(bytes32)": {
					"notice": "This function approves a transaction identified by its id."
				},
				"cancelTransaction(bytes32)": {
					"notice": "Allows a signer to cancel a transaction."
				},
				"constructor": {
					"notice": "A constructor to initialize the contract and set the signers, required signatures and recovery address."
				},
				"createTransaction(address,uint256,bytes)": {
					"notice": "Creates a new transaction with the provided destination address, value, and data."
				},
				"createUniqueId(address,uint256,bytes)": {
					"notice": "Generates a unique ID for a transaction."
				},
				"executeTransaction(bytes32)": {
					"notice": "Approves a transaction identified by the given ID."
				},
				"recoverWallet(address)": {
					"notice": "Recovers a wallet by transferring ownership to a new address."
				},
				"removeSigner(address)": {
					"notice": "Removes a signer from the list of signers."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/MultiSigWallet.sol": "MultiSigWallet"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/MultiSigWallet.sol": {
			"keccak256": "0xa098e41aa2f35f56067b282df6ebb03e3ef21065d160a89e395686ab6b2ff5d8",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://903e782fb6564e7cc6c5db40dd664c5f538bdf5ff3ceb2bd4893cb70e76db423",
				"dweb:/ipfs/QmcWzpktGvq3aspxZdaAVZEAqxZDhu34aCiKEZVVj5U3eA"
			]
		}
	},
	"version": 1
}